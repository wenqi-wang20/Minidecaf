Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LBracket
    RBracket

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> program function
Rule 3     program -> function
Rule 4     program -> program declaration Semi
Rule 5     program -> declaration Semi
Rule 6     type -> Int
Rule 7     function -> type Identifier LParen parameter_list RParen LBrace block RBrace
Rule 8     function -> type Identifier LParen parameter_list RParen Semi
Rule 9     block -> block block_item
Rule 10    block -> empty
Rule 11    block_item -> statement
Rule 12    block_item -> declaration Semi
Rule 13    statement -> statement_matched
Rule 14    statement -> statement_unmatched
Rule 15    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 16    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 17    statement_unmatched -> If LParen expression RParen statement
Rule 18    statement_matched -> While LParen expression RParen statement_matched
Rule 19    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 20    statement_matched -> Return expression Semi
Rule 21    statement_matched -> opt_expression Semi
Rule 22    statement_matched -> LBrace block RBrace
Rule 23    statement_matched -> Break Semi
Rule 24    opt_expression -> expression
Rule 25    opt_expression -> empty
Rule 26    declaration -> type Identifier
Rule 27    declaration -> type Identifier Assign expression
Rule 28    expression -> assignment
Rule 29    assignment -> conditional
Rule 30    conditional -> logical_or
Rule 31    logical_or -> logical_and
Rule 32    logical_and -> bit_or
Rule 33    bit_or -> xor
Rule 34    xor -> bit_and
Rule 35    bit_and -> equality
Rule 36    equality -> relational
Rule 37    relational -> additive
Rule 38    additive -> multiplicative
Rule 39    multiplicative -> unary
Rule 40    unary -> postfix
Rule 41    postfix -> primary
Rule 42    unary -> Minus unary
Rule 43    unary -> BitNot unary
Rule 44    unary -> Not unary
Rule 45    assignment -> Identifier Assign expression
Rule 46    logical_or -> logical_or Or logical_and
Rule 47    logical_and -> logical_and And bit_or
Rule 48    bit_or -> bit_or BitOr xor
Rule 49    xor -> xor Xor bit_and
Rule 50    bit_and -> bit_and BitAnd equality
Rule 51    equality -> equality NotEqual relational
Rule 52    equality -> equality Equal relational
Rule 53    relational -> relational Less additive
Rule 54    relational -> relational Greater additive
Rule 55    relational -> relational LessEqual additive
Rule 56    relational -> relational GreaterEqual additive
Rule 57    additive -> additive Plus multiplicative
Rule 58    additive -> additive Minus multiplicative
Rule 59    multiplicative -> multiplicative Mul unary
Rule 60    multiplicative -> multiplicative Div unary
Rule 61    multiplicative -> multiplicative Mod unary
Rule 62    conditional -> logical_or Question expression Colon conditional
Rule 63    primary -> Integer
Rule 64    primary -> Identifier
Rule 65    primary -> LParen expression RParen
Rule 66    statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 67    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 68    statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 69    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 70    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 71    statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi
Rule 72    statement_matched -> Continue Semi
Rule 73    parameter_item -> type Identifier
Rule 74    parameter_list -> parameter_list Comma parameter_item
Rule 75    parameter_list -> parameter_item
Rule 76    parameter_list -> empty
Rule 77    expression_list -> expression_list Comma expression
Rule 78    expression_list -> expression
Rule 79    expression_list -> empty
Rule 80    postfix -> Identifier LParen expression_list RParen

Terminals, with rules where they appear

And                  : 47
Assign               : 27 45
BitAnd               : 50
BitNot               : 43
BitOr                : 48
Break                : 23
Colon                : 62
Comma                : 74 77
Continue             : 72
Div                  : 60
Do                   : 70 71
Else                 : 15 16
Equal                : 52
For                  : 66 67 68 69
Greater              : 54
GreaterEqual         : 56
Identifier           : 7 8 26 27 45 64 73 80
If                   : 15 16 17
Int                  : 6
Integer              : 63
LBrace               : 7 22
LBracket             : 
LParen               : 7 8 15 16 17 18 19 65 66 67 68 69 70 71 80
Less                 : 53
LessEqual            : 55
Minus                : 42 58
Mod                  : 61
Mul                  : 59
Not                  : 44
NotEqual             : 51
Or                   : 46
Plus                 : 57
Question             : 62
RBrace               : 7 22
RBracket             : 
RParen               : 7 8 15 16 17 18 19 65 66 67 68 69 70 71 80
Return               : 20
Semi                 : 4 5 8 12 20 21 23 66 66 67 67 68 68 69 69 70 71 72
While                : 18 19 70 71
Xor                  : 49
error                : 

Nonterminals, with rules where they appear

additive             : 37 53 54 55 56 57 58
assignment           : 28
bit_and              : 34 49 50
bit_or               : 32 47 48
block                : 7 9 22
block_item           : 9
conditional          : 29 62
declaration          : 4 5 12 68 69
empty                : 10 25 76 79
equality             : 35 50 51 52
expression           : 15 16 17 18 19 20 24 27 45 62 65 70 71 77 78
expression_list      : 77 80
function             : 2 3
logical_and          : 31 46 47
logical_or           : 30 46 62
multiplicative       : 38 57 58 59 60 61
opt_expression       : 21 66 66 66 67 67 67 68 68 69 69
parameter_item       : 74 75
parameter_list       : 7 8 74
postfix              : 40
primary              : 41
program              : 2 4 0
relational           : 36 51 52 53 54 55 56
statement            : 11 17
statement_matched    : 13 15 15 16 18 66 68 70
statement_unmatched  : 14 16 19 67 69 71
type                 : 7 8 26 27 73
unary                : 39 42 43 44 59 60 61
xor                  : 33 48 49

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . program function
    (3) program -> . function
    (4) program -> . program declaration Semi
    (5) program -> . declaration Semi
    (7) function -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> . type Identifier LParen parameter_list RParen Semi
    (26) declaration -> . type Identifier
    (27) declaration -> . type Identifier Assign expression
    (6) type -> . Int

    Int             shift and go to state 5

    program                        shift and go to state 1
    function                       shift and go to state 2
    declaration                    shift and go to state 3
    type                           shift and go to state 4

state 1

    (0) S' -> program .
    (2) program -> program . function
    (4) program -> program . declaration Semi
    (7) function -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> . type Identifier LParen parameter_list RParen Semi
    (26) declaration -> . type Identifier
    (27) declaration -> . type Identifier Assign expression
    (6) type -> . Int

    Int             shift and go to state 5

    function                       shift and go to state 6
    declaration                    shift and go to state 7
    type                           shift and go to state 4

state 2

    (3) program -> function .

    Int             reduce using rule 3 (program -> function .)
    $end            reduce using rule 3 (program -> function .)


state 3

    (5) program -> declaration . Semi

    Semi            shift and go to state 8


state 4

    (7) function -> type . Identifier LParen parameter_list RParen LBrace block RBrace
    (8) function -> type . Identifier LParen parameter_list RParen Semi
    (26) declaration -> type . Identifier
    (27) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 9


state 5

    (6) type -> Int .

    Identifier      reduce using rule 6 (type -> Int .)


state 6

    (2) program -> program function .

    Int             reduce using rule 2 (program -> program function .)
    $end            reduce using rule 2 (program -> program function .)


state 7

    (4) program -> program declaration . Semi

    Semi            shift and go to state 10


state 8

    (5) program -> declaration Semi .

    Int             reduce using rule 5 (program -> declaration Semi .)
    $end            reduce using rule 5 (program -> declaration Semi .)


state 9

    (7) function -> type Identifier . LParen parameter_list RParen LBrace block RBrace
    (8) function -> type Identifier . LParen parameter_list RParen Semi
    (26) declaration -> type Identifier .
    (27) declaration -> type Identifier . Assign expression

    LParen          shift and go to state 11
    Semi            reduce using rule 26 (declaration -> type Identifier .)
    Assign          shift and go to state 12


state 10

    (4) program -> program declaration Semi .

    Int             reduce using rule 4 (program -> program declaration Semi .)
    $end            reduce using rule 4 (program -> program declaration Semi .)


state 11

    (7) function -> type Identifier LParen . parameter_list RParen LBrace block RBrace
    (8) function -> type Identifier LParen . parameter_list RParen Semi
    (74) parameter_list -> . parameter_list Comma parameter_item
    (75) parameter_list -> . parameter_item
    (76) parameter_list -> . empty
    (73) parameter_item -> . type Identifier
    (1) empty -> .
    (6) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Int             shift and go to state 5

    type                           shift and go to state 13
    parameter_list                 shift and go to state 14
    parameter_item                 shift and go to state 15
    empty                          shift and go to state 16

state 12

    (27) declaration -> type Identifier Assign . expression
    (28) expression -> . assignment
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 18
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 13

    (73) parameter_item -> type . Identifier

    Identifier      shift and go to state 38


state 14

    (7) function -> type Identifier LParen parameter_list . RParen LBrace block RBrace
    (8) function -> type Identifier LParen parameter_list . RParen Semi
    (74) parameter_list -> parameter_list . Comma parameter_item

    RParen          shift and go to state 39
    Comma           shift and go to state 40


state 15

    (75) parameter_list -> parameter_item .

    RParen          reduce using rule 75 (parameter_list -> parameter_item .)
    Comma           reduce using rule 75 (parameter_list -> parameter_item .)


state 16

    (76) parameter_list -> empty .

    RParen          reduce using rule 76 (parameter_list -> empty .)
    Comma           reduce using rule 76 (parameter_list -> empty .)


state 17

    (45) assignment -> Identifier . Assign expression
    (80) postfix -> Identifier . LParen expression_list RParen
    (64) primary -> Identifier .

    Assign          shift and go to state 41
    LParen          shift and go to state 42
    Mul             reduce using rule 64 (primary -> Identifier .)
    Div             reduce using rule 64 (primary -> Identifier .)
    Mod             reduce using rule 64 (primary -> Identifier .)
    Plus            reduce using rule 64 (primary -> Identifier .)
    Minus           reduce using rule 64 (primary -> Identifier .)
    Less            reduce using rule 64 (primary -> Identifier .)
    Greater         reduce using rule 64 (primary -> Identifier .)
    LessEqual       reduce using rule 64 (primary -> Identifier .)
    GreaterEqual    reduce using rule 64 (primary -> Identifier .)
    NotEqual        reduce using rule 64 (primary -> Identifier .)
    Equal           reduce using rule 64 (primary -> Identifier .)
    BitAnd          reduce using rule 64 (primary -> Identifier .)
    Xor             reduce using rule 64 (primary -> Identifier .)
    BitOr           reduce using rule 64 (primary -> Identifier .)
    And             reduce using rule 64 (primary -> Identifier .)
    Question        reduce using rule 64 (primary -> Identifier .)
    Or              reduce using rule 64 (primary -> Identifier .)
    Semi            reduce using rule 64 (primary -> Identifier .)
    RParen          reduce using rule 64 (primary -> Identifier .)
    Comma           reduce using rule 64 (primary -> Identifier .)
    Colon           reduce using rule 64 (primary -> Identifier .)


state 18

    (27) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 27 (declaration -> type Identifier Assign expression .)


state 19

    (28) expression -> assignment .

    Semi            reduce using rule 28 (expression -> assignment .)
    RParen          reduce using rule 28 (expression -> assignment .)
    Comma           reduce using rule 28 (expression -> assignment .)
    Colon           reduce using rule 28 (expression -> assignment .)


state 20

    (29) assignment -> conditional .

    Semi            reduce using rule 29 (assignment -> conditional .)
    RParen          reduce using rule 29 (assignment -> conditional .)
    Comma           reduce using rule 29 (assignment -> conditional .)
    Colon           reduce using rule 29 (assignment -> conditional .)


state 21

    (30) conditional -> logical_or .
    (62) conditional -> logical_or . Question expression Colon conditional
    (46) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 30 (conditional -> logical_or .)
    RParen          reduce using rule 30 (conditional -> logical_or .)
    Comma           reduce using rule 30 (conditional -> logical_or .)
    Colon           reduce using rule 30 (conditional -> logical_or .)
    Question        shift and go to state 43
    Or              shift and go to state 44


state 22

    (31) logical_or -> logical_and .
    (47) logical_and -> logical_and . And bit_or

    Question        reduce using rule 31 (logical_or -> logical_and .)
    Or              reduce using rule 31 (logical_or -> logical_and .)
    Semi            reduce using rule 31 (logical_or -> logical_and .)
    RParen          reduce using rule 31 (logical_or -> logical_and .)
    Comma           reduce using rule 31 (logical_or -> logical_and .)
    Colon           reduce using rule 31 (logical_or -> logical_and .)
    And             shift and go to state 45


state 23

    (32) logical_and -> bit_or .
    (48) bit_or -> bit_or . BitOr xor

    And             reduce using rule 32 (logical_and -> bit_or .)
    Question        reduce using rule 32 (logical_and -> bit_or .)
    Or              reduce using rule 32 (logical_and -> bit_or .)
    Semi            reduce using rule 32 (logical_and -> bit_or .)
    RParen          reduce using rule 32 (logical_and -> bit_or .)
    Comma           reduce using rule 32 (logical_and -> bit_or .)
    Colon           reduce using rule 32 (logical_and -> bit_or .)
    BitOr           shift and go to state 46


state 24

    (33) bit_or -> xor .
    (49) xor -> xor . Xor bit_and

    BitOr           reduce using rule 33 (bit_or -> xor .)
    And             reduce using rule 33 (bit_or -> xor .)
    Question        reduce using rule 33 (bit_or -> xor .)
    Or              reduce using rule 33 (bit_or -> xor .)
    Semi            reduce using rule 33 (bit_or -> xor .)
    RParen          reduce using rule 33 (bit_or -> xor .)
    Comma           reduce using rule 33 (bit_or -> xor .)
    Colon           reduce using rule 33 (bit_or -> xor .)
    Xor             shift and go to state 47


state 25

    (34) xor -> bit_and .
    (50) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 34 (xor -> bit_and .)
    BitOr           reduce using rule 34 (xor -> bit_and .)
    And             reduce using rule 34 (xor -> bit_and .)
    Question        reduce using rule 34 (xor -> bit_and .)
    Or              reduce using rule 34 (xor -> bit_and .)
    Semi            reduce using rule 34 (xor -> bit_and .)
    RParen          reduce using rule 34 (xor -> bit_and .)
    Comma           reduce using rule 34 (xor -> bit_and .)
    Colon           reduce using rule 34 (xor -> bit_and .)
    BitAnd          shift and go to state 48


state 26

    (35) bit_and -> equality .
    (51) equality -> equality . NotEqual relational
    (52) equality -> equality . Equal relational

    BitAnd          reduce using rule 35 (bit_and -> equality .)
    Xor             reduce using rule 35 (bit_and -> equality .)
    BitOr           reduce using rule 35 (bit_and -> equality .)
    And             reduce using rule 35 (bit_and -> equality .)
    Question        reduce using rule 35 (bit_and -> equality .)
    Or              reduce using rule 35 (bit_and -> equality .)
    Semi            reduce using rule 35 (bit_and -> equality .)
    RParen          reduce using rule 35 (bit_and -> equality .)
    Comma           reduce using rule 35 (bit_and -> equality .)
    Colon           reduce using rule 35 (bit_and -> equality .)
    NotEqual        shift and go to state 49
    Equal           shift and go to state 50


state 27

    (36) equality -> relational .
    (53) relational -> relational . Less additive
    (54) relational -> relational . Greater additive
    (55) relational -> relational . LessEqual additive
    (56) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 36 (equality -> relational .)
    Equal           reduce using rule 36 (equality -> relational .)
    BitAnd          reduce using rule 36 (equality -> relational .)
    Xor             reduce using rule 36 (equality -> relational .)
    BitOr           reduce using rule 36 (equality -> relational .)
    And             reduce using rule 36 (equality -> relational .)
    Question        reduce using rule 36 (equality -> relational .)
    Or              reduce using rule 36 (equality -> relational .)
    Semi            reduce using rule 36 (equality -> relational .)
    RParen          reduce using rule 36 (equality -> relational .)
    Comma           reduce using rule 36 (equality -> relational .)
    Colon           reduce using rule 36 (equality -> relational .)
    Less            shift and go to state 51
    Greater         shift and go to state 52
    LessEqual       shift and go to state 53
    GreaterEqual    shift and go to state 54


state 28

    (37) relational -> additive .
    (57) additive -> additive . Plus multiplicative
    (58) additive -> additive . Minus multiplicative

    Less            reduce using rule 37 (relational -> additive .)
    Greater         reduce using rule 37 (relational -> additive .)
    LessEqual       reduce using rule 37 (relational -> additive .)
    GreaterEqual    reduce using rule 37 (relational -> additive .)
    NotEqual        reduce using rule 37 (relational -> additive .)
    Equal           reduce using rule 37 (relational -> additive .)
    BitAnd          reduce using rule 37 (relational -> additive .)
    Xor             reduce using rule 37 (relational -> additive .)
    BitOr           reduce using rule 37 (relational -> additive .)
    And             reduce using rule 37 (relational -> additive .)
    Question        reduce using rule 37 (relational -> additive .)
    Or              reduce using rule 37 (relational -> additive .)
    Semi            reduce using rule 37 (relational -> additive .)
    RParen          reduce using rule 37 (relational -> additive .)
    Comma           reduce using rule 37 (relational -> additive .)
    Colon           reduce using rule 37 (relational -> additive .)
    Plus            shift and go to state 55
    Minus           shift and go to state 56


state 29

    (38) additive -> multiplicative .
    (59) multiplicative -> multiplicative . Mul unary
    (60) multiplicative -> multiplicative . Div unary
    (61) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 38 (additive -> multiplicative .)
    Minus           reduce using rule 38 (additive -> multiplicative .)
    Less            reduce using rule 38 (additive -> multiplicative .)
    Greater         reduce using rule 38 (additive -> multiplicative .)
    LessEqual       reduce using rule 38 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 38 (additive -> multiplicative .)
    NotEqual        reduce using rule 38 (additive -> multiplicative .)
    Equal           reduce using rule 38 (additive -> multiplicative .)
    BitAnd          reduce using rule 38 (additive -> multiplicative .)
    Xor             reduce using rule 38 (additive -> multiplicative .)
    BitOr           reduce using rule 38 (additive -> multiplicative .)
    And             reduce using rule 38 (additive -> multiplicative .)
    Question        reduce using rule 38 (additive -> multiplicative .)
    Or              reduce using rule 38 (additive -> multiplicative .)
    Semi            reduce using rule 38 (additive -> multiplicative .)
    RParen          reduce using rule 38 (additive -> multiplicative .)
    Comma           reduce using rule 38 (additive -> multiplicative .)
    Colon           reduce using rule 38 (additive -> multiplicative .)
    Mul             shift and go to state 57
    Div             shift and go to state 58
    Mod             shift and go to state 59


state 30

    (42) unary -> Minus . unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    unary                          shift and go to state 60
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 31

    (39) multiplicative -> unary .

    Mul             reduce using rule 39 (multiplicative -> unary .)
    Div             reduce using rule 39 (multiplicative -> unary .)
    Mod             reduce using rule 39 (multiplicative -> unary .)
    Plus            reduce using rule 39 (multiplicative -> unary .)
    Minus           reduce using rule 39 (multiplicative -> unary .)
    Less            reduce using rule 39 (multiplicative -> unary .)
    Greater         reduce using rule 39 (multiplicative -> unary .)
    LessEqual       reduce using rule 39 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 39 (multiplicative -> unary .)
    NotEqual        reduce using rule 39 (multiplicative -> unary .)
    Equal           reduce using rule 39 (multiplicative -> unary .)
    BitAnd          reduce using rule 39 (multiplicative -> unary .)
    Xor             reduce using rule 39 (multiplicative -> unary .)
    BitOr           reduce using rule 39 (multiplicative -> unary .)
    And             reduce using rule 39 (multiplicative -> unary .)
    Question        reduce using rule 39 (multiplicative -> unary .)
    Or              reduce using rule 39 (multiplicative -> unary .)
    Semi            reduce using rule 39 (multiplicative -> unary .)
    RParen          reduce using rule 39 (multiplicative -> unary .)
    Comma           reduce using rule 39 (multiplicative -> unary .)
    Colon           reduce using rule 39 (multiplicative -> unary .)


state 32

    (40) unary -> postfix .

    Mul             reduce using rule 40 (unary -> postfix .)
    Div             reduce using rule 40 (unary -> postfix .)
    Mod             reduce using rule 40 (unary -> postfix .)
    Plus            reduce using rule 40 (unary -> postfix .)
    Minus           reduce using rule 40 (unary -> postfix .)
    Less            reduce using rule 40 (unary -> postfix .)
    Greater         reduce using rule 40 (unary -> postfix .)
    LessEqual       reduce using rule 40 (unary -> postfix .)
    GreaterEqual    reduce using rule 40 (unary -> postfix .)
    NotEqual        reduce using rule 40 (unary -> postfix .)
    Equal           reduce using rule 40 (unary -> postfix .)
    BitAnd          reduce using rule 40 (unary -> postfix .)
    Xor             reduce using rule 40 (unary -> postfix .)
    BitOr           reduce using rule 40 (unary -> postfix .)
    And             reduce using rule 40 (unary -> postfix .)
    Question        reduce using rule 40 (unary -> postfix .)
    Or              reduce using rule 40 (unary -> postfix .)
    Semi            reduce using rule 40 (unary -> postfix .)
    RParen          reduce using rule 40 (unary -> postfix .)
    Comma           reduce using rule 40 (unary -> postfix .)
    Colon           reduce using rule 40 (unary -> postfix .)


state 33

    (43) unary -> BitNot . unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    unary                          shift and go to state 62
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 34

    (44) unary -> Not . unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    unary                          shift and go to state 63
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 35

    (41) postfix -> primary .

    Mul             reduce using rule 41 (postfix -> primary .)
    Div             reduce using rule 41 (postfix -> primary .)
    Mod             reduce using rule 41 (postfix -> primary .)
    Plus            reduce using rule 41 (postfix -> primary .)
    Minus           reduce using rule 41 (postfix -> primary .)
    Less            reduce using rule 41 (postfix -> primary .)
    Greater         reduce using rule 41 (postfix -> primary .)
    LessEqual       reduce using rule 41 (postfix -> primary .)
    GreaterEqual    reduce using rule 41 (postfix -> primary .)
    NotEqual        reduce using rule 41 (postfix -> primary .)
    Equal           reduce using rule 41 (postfix -> primary .)
    BitAnd          reduce using rule 41 (postfix -> primary .)
    Xor             reduce using rule 41 (postfix -> primary .)
    BitOr           reduce using rule 41 (postfix -> primary .)
    And             reduce using rule 41 (postfix -> primary .)
    Question        reduce using rule 41 (postfix -> primary .)
    Or              reduce using rule 41 (postfix -> primary .)
    Semi            reduce using rule 41 (postfix -> primary .)
    RParen          reduce using rule 41 (postfix -> primary .)
    Comma           reduce using rule 41 (postfix -> primary .)
    Colon           reduce using rule 41 (postfix -> primary .)


state 36

    (65) primary -> LParen . expression RParen
    (28) expression -> . assignment
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 64
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 37

    (63) primary -> Integer .

    Mul             reduce using rule 63 (primary -> Integer .)
    Div             reduce using rule 63 (primary -> Integer .)
    Mod             reduce using rule 63 (primary -> Integer .)
    Plus            reduce using rule 63 (primary -> Integer .)
    Minus           reduce using rule 63 (primary -> Integer .)
    Less            reduce using rule 63 (primary -> Integer .)
    Greater         reduce using rule 63 (primary -> Integer .)
    LessEqual       reduce using rule 63 (primary -> Integer .)
    GreaterEqual    reduce using rule 63 (primary -> Integer .)
    NotEqual        reduce using rule 63 (primary -> Integer .)
    Equal           reduce using rule 63 (primary -> Integer .)
    BitAnd          reduce using rule 63 (primary -> Integer .)
    Xor             reduce using rule 63 (primary -> Integer .)
    BitOr           reduce using rule 63 (primary -> Integer .)
    And             reduce using rule 63 (primary -> Integer .)
    Question        reduce using rule 63 (primary -> Integer .)
    Or              reduce using rule 63 (primary -> Integer .)
    Semi            reduce using rule 63 (primary -> Integer .)
    RParen          reduce using rule 63 (primary -> Integer .)
    Comma           reduce using rule 63 (primary -> Integer .)
    Colon           reduce using rule 63 (primary -> Integer .)


state 38

    (73) parameter_item -> type Identifier .

    RParen          reduce using rule 73 (parameter_item -> type Identifier .)
    Comma           reduce using rule 73 (parameter_item -> type Identifier .)


state 39

    (7) function -> type Identifier LParen parameter_list RParen . LBrace block RBrace
    (8) function -> type Identifier LParen parameter_list RParen . Semi

    LBrace          shift and go to state 65
    Semi            shift and go to state 66


state 40

    (74) parameter_list -> parameter_list Comma . parameter_item
    (73) parameter_item -> . type Identifier
    (6) type -> . Int

    Int             shift and go to state 5

    parameter_item                 shift and go to state 67
    type                           shift and go to state 13

state 41

    (45) assignment -> Identifier Assign . expression
    (28) expression -> . assignment
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 68
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 42

    (80) postfix -> Identifier LParen . expression_list RParen
    (77) expression_list -> . expression_list Comma expression
    (78) expression_list -> . expression
    (79) expression_list -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression_list                shift and go to state 69
    expression                     shift and go to state 70
    empty                          shift and go to state 71
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 43

    (62) conditional -> logical_or Question . expression Colon conditional
    (28) expression -> . assignment
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    logical_or                     shift and go to state 21
    expression                     shift and go to state 72
    conditional                    shift and go to state 20
    assignment                     shift and go to state 19
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 44

    (46) logical_or -> logical_or Or . logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    logical_and                    shift and go to state 73
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 45

    (47) logical_and -> logical_and And . bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    bit_or                         shift and go to state 74
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 46

    (48) bit_or -> bit_or BitOr . xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    xor                            shift and go to state 75
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 47

    (49) xor -> xor Xor . bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    bit_and                        shift and go to state 76
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 48

    (50) bit_and -> bit_and BitAnd . equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    equality                       shift and go to state 77
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 49

    (51) equality -> equality NotEqual . relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    relational                     shift and go to state 78
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 50

    (52) equality -> equality Equal . relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    relational                     shift and go to state 79
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 51

    (53) relational -> relational Less . additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    additive                       shift and go to state 80
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 52

    (54) relational -> relational Greater . additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    additive                       shift and go to state 81
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 53

    (55) relational -> relational LessEqual . additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    additive                       shift and go to state 82
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 54

    (56) relational -> relational GreaterEqual . additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    additive                       shift and go to state 83
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 55

    (57) additive -> additive Plus . multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    multiplicative                 shift and go to state 84
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 56

    (58) additive -> additive Minus . multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    multiplicative                 shift and go to state 85
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 57

    (59) multiplicative -> multiplicative Mul . unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    unary                          shift and go to state 86
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 58

    (60) multiplicative -> multiplicative Div . unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    unary                          shift and go to state 87
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 59

    (61) multiplicative -> multiplicative Mod . unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    unary                          shift and go to state 88
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 60

    (42) unary -> Minus unary .

    Mul             reduce using rule 42 (unary -> Minus unary .)
    Div             reduce using rule 42 (unary -> Minus unary .)
    Mod             reduce using rule 42 (unary -> Minus unary .)
    Plus            reduce using rule 42 (unary -> Minus unary .)
    Minus           reduce using rule 42 (unary -> Minus unary .)
    Less            reduce using rule 42 (unary -> Minus unary .)
    Greater         reduce using rule 42 (unary -> Minus unary .)
    LessEqual       reduce using rule 42 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 42 (unary -> Minus unary .)
    NotEqual        reduce using rule 42 (unary -> Minus unary .)
    Equal           reduce using rule 42 (unary -> Minus unary .)
    BitAnd          reduce using rule 42 (unary -> Minus unary .)
    Xor             reduce using rule 42 (unary -> Minus unary .)
    BitOr           reduce using rule 42 (unary -> Minus unary .)
    And             reduce using rule 42 (unary -> Minus unary .)
    Question        reduce using rule 42 (unary -> Minus unary .)
    Or              reduce using rule 42 (unary -> Minus unary .)
    Semi            reduce using rule 42 (unary -> Minus unary .)
    RParen          reduce using rule 42 (unary -> Minus unary .)
    Comma           reduce using rule 42 (unary -> Minus unary .)
    Colon           reduce using rule 42 (unary -> Minus unary .)


state 61

    (80) postfix -> Identifier . LParen expression_list RParen
    (64) primary -> Identifier .

    LParen          shift and go to state 42
    Mul             reduce using rule 64 (primary -> Identifier .)
    Div             reduce using rule 64 (primary -> Identifier .)
    Mod             reduce using rule 64 (primary -> Identifier .)
    Plus            reduce using rule 64 (primary -> Identifier .)
    Minus           reduce using rule 64 (primary -> Identifier .)
    Less            reduce using rule 64 (primary -> Identifier .)
    Greater         reduce using rule 64 (primary -> Identifier .)
    LessEqual       reduce using rule 64 (primary -> Identifier .)
    GreaterEqual    reduce using rule 64 (primary -> Identifier .)
    NotEqual        reduce using rule 64 (primary -> Identifier .)
    Equal           reduce using rule 64 (primary -> Identifier .)
    BitAnd          reduce using rule 64 (primary -> Identifier .)
    Xor             reduce using rule 64 (primary -> Identifier .)
    BitOr           reduce using rule 64 (primary -> Identifier .)
    And             reduce using rule 64 (primary -> Identifier .)
    Question        reduce using rule 64 (primary -> Identifier .)
    Or              reduce using rule 64 (primary -> Identifier .)
    Semi            reduce using rule 64 (primary -> Identifier .)
    RParen          reduce using rule 64 (primary -> Identifier .)
    Comma           reduce using rule 64 (primary -> Identifier .)
    Colon           reduce using rule 64 (primary -> Identifier .)


state 62

    (43) unary -> BitNot unary .

    Mul             reduce using rule 43 (unary -> BitNot unary .)
    Div             reduce using rule 43 (unary -> BitNot unary .)
    Mod             reduce using rule 43 (unary -> BitNot unary .)
    Plus            reduce using rule 43 (unary -> BitNot unary .)
    Minus           reduce using rule 43 (unary -> BitNot unary .)
    Less            reduce using rule 43 (unary -> BitNot unary .)
    Greater         reduce using rule 43 (unary -> BitNot unary .)
    LessEqual       reduce using rule 43 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 43 (unary -> BitNot unary .)
    NotEqual        reduce using rule 43 (unary -> BitNot unary .)
    Equal           reduce using rule 43 (unary -> BitNot unary .)
    BitAnd          reduce using rule 43 (unary -> BitNot unary .)
    Xor             reduce using rule 43 (unary -> BitNot unary .)
    BitOr           reduce using rule 43 (unary -> BitNot unary .)
    And             reduce using rule 43 (unary -> BitNot unary .)
    Question        reduce using rule 43 (unary -> BitNot unary .)
    Or              reduce using rule 43 (unary -> BitNot unary .)
    Semi            reduce using rule 43 (unary -> BitNot unary .)
    RParen          reduce using rule 43 (unary -> BitNot unary .)
    Comma           reduce using rule 43 (unary -> BitNot unary .)
    Colon           reduce using rule 43 (unary -> BitNot unary .)


state 63

    (44) unary -> Not unary .

    Mul             reduce using rule 44 (unary -> Not unary .)
    Div             reduce using rule 44 (unary -> Not unary .)
    Mod             reduce using rule 44 (unary -> Not unary .)
    Plus            reduce using rule 44 (unary -> Not unary .)
    Minus           reduce using rule 44 (unary -> Not unary .)
    Less            reduce using rule 44 (unary -> Not unary .)
    Greater         reduce using rule 44 (unary -> Not unary .)
    LessEqual       reduce using rule 44 (unary -> Not unary .)
    GreaterEqual    reduce using rule 44 (unary -> Not unary .)
    NotEqual        reduce using rule 44 (unary -> Not unary .)
    Equal           reduce using rule 44 (unary -> Not unary .)
    BitAnd          reduce using rule 44 (unary -> Not unary .)
    Xor             reduce using rule 44 (unary -> Not unary .)
    BitOr           reduce using rule 44 (unary -> Not unary .)
    And             reduce using rule 44 (unary -> Not unary .)
    Question        reduce using rule 44 (unary -> Not unary .)
    Or              reduce using rule 44 (unary -> Not unary .)
    Semi            reduce using rule 44 (unary -> Not unary .)
    RParen          reduce using rule 44 (unary -> Not unary .)
    Comma           reduce using rule 44 (unary -> Not unary .)
    Colon           reduce using rule 44 (unary -> Not unary .)


state 64

    (65) primary -> LParen expression . RParen

    RParen          shift and go to state 89


state 65

    (7) function -> type Identifier LParen parameter_list RParen LBrace . block RBrace
    (9) block -> . block block_item
    (10) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 90
    empty                          shift and go to state 91

state 66

    (8) function -> type Identifier LParen parameter_list RParen Semi .

    Int             reduce using rule 8 (function -> type Identifier LParen parameter_list RParen Semi .)
    $end            reduce using rule 8 (function -> type Identifier LParen parameter_list RParen Semi .)


state 67

    (74) parameter_list -> parameter_list Comma parameter_item .

    RParen          reduce using rule 74 (parameter_list -> parameter_list Comma parameter_item .)
    Comma           reduce using rule 74 (parameter_list -> parameter_list Comma parameter_item .)


state 68

    (45) assignment -> Identifier Assign expression .

    Semi            reduce using rule 45 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 45 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 45 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 45 (assignment -> Identifier Assign expression .)


state 69

    (80) postfix -> Identifier LParen expression_list . RParen
    (77) expression_list -> expression_list . Comma expression

    RParen          shift and go to state 92
    Comma           shift and go to state 93


state 70

    (78) expression_list -> expression .

    RParen          reduce using rule 78 (expression_list -> expression .)
    Comma           reduce using rule 78 (expression_list -> expression .)


state 71

    (79) expression_list -> empty .

    RParen          reduce using rule 79 (expression_list -> empty .)
    Comma           reduce using rule 79 (expression_list -> empty .)


state 72

    (62) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 94


state 73

    (46) logical_or -> logical_or Or logical_and .
    (47) logical_and -> logical_and . And bit_or

    Question        reduce using rule 46 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 46 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 46 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 46 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 46 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 46 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 45


state 74

    (47) logical_and -> logical_and And bit_or .
    (48) bit_or -> bit_or . BitOr xor

    And             reduce using rule 47 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 47 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 47 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 47 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 47 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 47 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 47 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 46


state 75

    (48) bit_or -> bit_or BitOr xor .
    (49) xor -> xor . Xor bit_and

    BitOr           reduce using rule 48 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 48 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 48 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 48 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 48 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 48 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 48 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 48 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 47


state 76

    (49) xor -> xor Xor bit_and .
    (50) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 49 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 49 (xor -> xor Xor bit_and .)
    And             reduce using rule 49 (xor -> xor Xor bit_and .)
    Question        reduce using rule 49 (xor -> xor Xor bit_and .)
    Or              reduce using rule 49 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 49 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 49 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 49 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 49 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 48


state 77

    (50) bit_and -> bit_and BitAnd equality .
    (51) equality -> equality . NotEqual relational
    (52) equality -> equality . Equal relational

    BitAnd          reduce using rule 50 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 50 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 50 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 50 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 50 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 50 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 50 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 50 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 50 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 50 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 49
    Equal           shift and go to state 50


state 78

    (51) equality -> equality NotEqual relational .
    (53) relational -> relational . Less additive
    (54) relational -> relational . Greater additive
    (55) relational -> relational . LessEqual additive
    (56) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 51 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 51 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 51 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 51 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 51 (equality -> equality NotEqual relational .)
    And             reduce using rule 51 (equality -> equality NotEqual relational .)
    Question        reduce using rule 51 (equality -> equality NotEqual relational .)
    Or              reduce using rule 51 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 51 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 51 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 51 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 51 (equality -> equality NotEqual relational .)
    Less            shift and go to state 51
    Greater         shift and go to state 52
    LessEqual       shift and go to state 53
    GreaterEqual    shift and go to state 54


state 79

    (52) equality -> equality Equal relational .
    (53) relational -> relational . Less additive
    (54) relational -> relational . Greater additive
    (55) relational -> relational . LessEqual additive
    (56) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 52 (equality -> equality Equal relational .)
    Equal           reduce using rule 52 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 52 (equality -> equality Equal relational .)
    Xor             reduce using rule 52 (equality -> equality Equal relational .)
    BitOr           reduce using rule 52 (equality -> equality Equal relational .)
    And             reduce using rule 52 (equality -> equality Equal relational .)
    Question        reduce using rule 52 (equality -> equality Equal relational .)
    Or              reduce using rule 52 (equality -> equality Equal relational .)
    Semi            reduce using rule 52 (equality -> equality Equal relational .)
    RParen          reduce using rule 52 (equality -> equality Equal relational .)
    Comma           reduce using rule 52 (equality -> equality Equal relational .)
    Colon           reduce using rule 52 (equality -> equality Equal relational .)
    Less            shift and go to state 51
    Greater         shift and go to state 52
    LessEqual       shift and go to state 53
    GreaterEqual    shift and go to state 54


state 80

    (53) relational -> relational Less additive .
    (57) additive -> additive . Plus multiplicative
    (58) additive -> additive . Minus multiplicative

    Less            reduce using rule 53 (relational -> relational Less additive .)
    Greater         reduce using rule 53 (relational -> relational Less additive .)
    LessEqual       reduce using rule 53 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 53 (relational -> relational Less additive .)
    NotEqual        reduce using rule 53 (relational -> relational Less additive .)
    Equal           reduce using rule 53 (relational -> relational Less additive .)
    BitAnd          reduce using rule 53 (relational -> relational Less additive .)
    Xor             reduce using rule 53 (relational -> relational Less additive .)
    BitOr           reduce using rule 53 (relational -> relational Less additive .)
    And             reduce using rule 53 (relational -> relational Less additive .)
    Question        reduce using rule 53 (relational -> relational Less additive .)
    Or              reduce using rule 53 (relational -> relational Less additive .)
    Semi            reduce using rule 53 (relational -> relational Less additive .)
    RParen          reduce using rule 53 (relational -> relational Less additive .)
    Comma           reduce using rule 53 (relational -> relational Less additive .)
    Colon           reduce using rule 53 (relational -> relational Less additive .)
    Plus            shift and go to state 55
    Minus           shift and go to state 56


state 81

    (54) relational -> relational Greater additive .
    (57) additive -> additive . Plus multiplicative
    (58) additive -> additive . Minus multiplicative

    Less            reduce using rule 54 (relational -> relational Greater additive .)
    Greater         reduce using rule 54 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 54 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 54 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 54 (relational -> relational Greater additive .)
    Equal           reduce using rule 54 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 54 (relational -> relational Greater additive .)
    Xor             reduce using rule 54 (relational -> relational Greater additive .)
    BitOr           reduce using rule 54 (relational -> relational Greater additive .)
    And             reduce using rule 54 (relational -> relational Greater additive .)
    Question        reduce using rule 54 (relational -> relational Greater additive .)
    Or              reduce using rule 54 (relational -> relational Greater additive .)
    Semi            reduce using rule 54 (relational -> relational Greater additive .)
    RParen          reduce using rule 54 (relational -> relational Greater additive .)
    Comma           reduce using rule 54 (relational -> relational Greater additive .)
    Colon           reduce using rule 54 (relational -> relational Greater additive .)
    Plus            shift and go to state 55
    Minus           shift and go to state 56


state 82

    (55) relational -> relational LessEqual additive .
    (57) additive -> additive . Plus multiplicative
    (58) additive -> additive . Minus multiplicative

    Less            reduce using rule 55 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 55 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 55 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 55 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 55 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 55 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 55 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 55 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 55 (relational -> relational LessEqual additive .)
    And             reduce using rule 55 (relational -> relational LessEqual additive .)
    Question        reduce using rule 55 (relational -> relational LessEqual additive .)
    Or              reduce using rule 55 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 55 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 55 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 55 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 55 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 55
    Minus           shift and go to state 56


state 83

    (56) relational -> relational GreaterEqual additive .
    (57) additive -> additive . Plus multiplicative
    (58) additive -> additive . Minus multiplicative

    Less            reduce using rule 56 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 56 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 56 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 56 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 56 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 56 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 56 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 56 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 56 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 56 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 56 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 56 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 56 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 56 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 56 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 56 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 55
    Minus           shift and go to state 56


state 84

    (57) additive -> additive Plus multiplicative .
    (59) multiplicative -> multiplicative . Mul unary
    (60) multiplicative -> multiplicative . Div unary
    (61) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 57 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 57 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 57 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 57 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 57 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 57 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 57 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 57 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 57 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 57 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 57 (additive -> additive Plus multiplicative .)
    And             reduce using rule 57 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 57 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 57 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 57 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 57 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 57 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 57 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 57
    Div             shift and go to state 58
    Mod             shift and go to state 59


state 85

    (58) additive -> additive Minus multiplicative .
    (59) multiplicative -> multiplicative . Mul unary
    (60) multiplicative -> multiplicative . Div unary
    (61) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 58 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 58 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 58 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 58 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 58 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 58 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 58 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 58 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 58 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 58 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 58 (additive -> additive Minus multiplicative .)
    And             reduce using rule 58 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 58 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 58 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 58 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 58 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 58 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 58 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 57
    Div             shift and go to state 58
    Mod             shift and go to state 59


state 86

    (59) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 59 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 59 (multiplicative -> multiplicative Mul unary .)


state 87

    (60) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 60 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 60 (multiplicative -> multiplicative Div unary .)


state 88

    (61) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 61 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 61 (multiplicative -> multiplicative Mod unary .)


state 89

    (65) primary -> LParen expression RParen .

    Mul             reduce using rule 65 (primary -> LParen expression RParen .)
    Div             reduce using rule 65 (primary -> LParen expression RParen .)
    Mod             reduce using rule 65 (primary -> LParen expression RParen .)
    Plus            reduce using rule 65 (primary -> LParen expression RParen .)
    Minus           reduce using rule 65 (primary -> LParen expression RParen .)
    Less            reduce using rule 65 (primary -> LParen expression RParen .)
    Greater         reduce using rule 65 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 65 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 65 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 65 (primary -> LParen expression RParen .)
    Equal           reduce using rule 65 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 65 (primary -> LParen expression RParen .)
    Xor             reduce using rule 65 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 65 (primary -> LParen expression RParen .)
    And             reduce using rule 65 (primary -> LParen expression RParen .)
    Question        reduce using rule 65 (primary -> LParen expression RParen .)
    Or              reduce using rule 65 (primary -> LParen expression RParen .)
    Semi            reduce using rule 65 (primary -> LParen expression RParen .)
    RParen          reduce using rule 65 (primary -> LParen expression RParen .)
    Comma           reduce using rule 65 (primary -> LParen expression RParen .)
    Colon           reduce using rule 65 (primary -> LParen expression RParen .)


state 90

    (7) function -> type Identifier LParen parameter_list RParen LBrace block . RBrace
    (9) block -> block . block_item
    (11) block_item -> . statement
    (12) block_item -> . declaration Semi
    (13) statement -> . statement_matched
    (14) statement -> . statement_unmatched
    (26) declaration -> . type Identifier
    (27) declaration -> . type Identifier Assign expression
    (15) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (18) statement_matched -> . While LParen expression RParen statement_matched
    (20) statement_matched -> . Return expression Semi
    (21) statement_matched -> . opt_expression Semi
    (22) statement_matched -> . LBrace block RBrace
    (23) statement_matched -> . Break Semi
    (66) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (68) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (70) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (72) statement_matched -> . Continue Semi
    (16) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> . If LParen expression RParen statement
    (19) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (67) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (69) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (71) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (6) type -> . Int
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    RBrace          shift and go to state 97
    If              shift and go to state 104
    While           shift and go to state 105
    Return          shift and go to state 106
    LBrace          shift and go to state 96
    Break           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 110
    Continue        shift and go to state 111
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    type                           shift and go to state 95
    block_item                     shift and go to state 98
    statement                      shift and go to state 99
    declaration                    shift and go to state 100
    statement_matched              shift and go to state 101
    statement_unmatched            shift and go to state 102
    expression                     shift and go to state 103
    opt_expression                 shift and go to state 107
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 91

    (10) block -> empty .

    RBrace          reduce using rule 10 (block -> empty .)
    If              reduce using rule 10 (block -> empty .)
    While           reduce using rule 10 (block -> empty .)
    Return          reduce using rule 10 (block -> empty .)
    LBrace          reduce using rule 10 (block -> empty .)
    Break           reduce using rule 10 (block -> empty .)
    For             reduce using rule 10 (block -> empty .)
    Do              reduce using rule 10 (block -> empty .)
    Continue        reduce using rule 10 (block -> empty .)
    Int             reduce using rule 10 (block -> empty .)
    Identifier      reduce using rule 10 (block -> empty .)
    Minus           reduce using rule 10 (block -> empty .)
    BitNot          reduce using rule 10 (block -> empty .)
    Not             reduce using rule 10 (block -> empty .)
    Integer         reduce using rule 10 (block -> empty .)
    LParen          reduce using rule 10 (block -> empty .)
    Semi            reduce using rule 10 (block -> empty .)


state 92

    (80) postfix -> Identifier LParen expression_list RParen .

    Mul             reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Div             reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Mod             reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Plus            reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Minus           reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Less            reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Greater         reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    LessEqual       reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    GreaterEqual    reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    NotEqual        reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Equal           reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    BitAnd          reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Xor             reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    BitOr           reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    And             reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Question        reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Or              reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Semi            reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    RParen          reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Comma           reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)
    Colon           reduce using rule 80 (postfix -> Identifier LParen expression_list RParen .)


state 93

    (77) expression_list -> expression_list Comma . expression
    (28) expression -> . assignment
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 113
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 94

    (62) conditional -> logical_or Question expression Colon . conditional
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Identifier      shift and go to state 61
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    logical_or                     shift and go to state 21
    conditional                    shift and go to state 114
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 95

    (26) declaration -> type . Identifier
    (27) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 115


state 96

    (22) statement_matched -> LBrace . block RBrace
    (9) block -> . block block_item
    (10) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 116
    empty                          shift and go to state 91

state 97

    (7) function -> type Identifier LParen parameter_list RParen LBrace block RBrace .

    Int             reduce using rule 7 (function -> type Identifier LParen parameter_list RParen LBrace block RBrace .)
    $end            reduce using rule 7 (function -> type Identifier LParen parameter_list RParen LBrace block RBrace .)


state 98

    (9) block -> block block_item .

    RBrace          reduce using rule 9 (block -> block block_item .)
    If              reduce using rule 9 (block -> block block_item .)
    While           reduce using rule 9 (block -> block block_item .)
    Return          reduce using rule 9 (block -> block block_item .)
    LBrace          reduce using rule 9 (block -> block block_item .)
    Break           reduce using rule 9 (block -> block block_item .)
    For             reduce using rule 9 (block -> block block_item .)
    Do              reduce using rule 9 (block -> block block_item .)
    Continue        reduce using rule 9 (block -> block block_item .)
    Int             reduce using rule 9 (block -> block block_item .)
    Identifier      reduce using rule 9 (block -> block block_item .)
    Minus           reduce using rule 9 (block -> block block_item .)
    BitNot          reduce using rule 9 (block -> block block_item .)
    Not             reduce using rule 9 (block -> block block_item .)
    Integer         reduce using rule 9 (block -> block block_item .)
    LParen          reduce using rule 9 (block -> block block_item .)
    Semi            reduce using rule 9 (block -> block block_item .)


state 99

    (11) block_item -> statement .

    RBrace          reduce using rule 11 (block_item -> statement .)
    If              reduce using rule 11 (block_item -> statement .)
    While           reduce using rule 11 (block_item -> statement .)
    Return          reduce using rule 11 (block_item -> statement .)
    LBrace          reduce using rule 11 (block_item -> statement .)
    Break           reduce using rule 11 (block_item -> statement .)
    For             reduce using rule 11 (block_item -> statement .)
    Do              reduce using rule 11 (block_item -> statement .)
    Continue        reduce using rule 11 (block_item -> statement .)
    Int             reduce using rule 11 (block_item -> statement .)
    Identifier      reduce using rule 11 (block_item -> statement .)
    Minus           reduce using rule 11 (block_item -> statement .)
    BitNot          reduce using rule 11 (block_item -> statement .)
    Not             reduce using rule 11 (block_item -> statement .)
    Integer         reduce using rule 11 (block_item -> statement .)
    LParen          reduce using rule 11 (block_item -> statement .)
    Semi            reduce using rule 11 (block_item -> statement .)


state 100

    (12) block_item -> declaration . Semi

    Semi            shift and go to state 117


state 101

    (13) statement -> statement_matched .

    RBrace          reduce using rule 13 (statement -> statement_matched .)
    If              reduce using rule 13 (statement -> statement_matched .)
    While           reduce using rule 13 (statement -> statement_matched .)
    Return          reduce using rule 13 (statement -> statement_matched .)
    LBrace          reduce using rule 13 (statement -> statement_matched .)
    Break           reduce using rule 13 (statement -> statement_matched .)
    For             reduce using rule 13 (statement -> statement_matched .)
    Do              reduce using rule 13 (statement -> statement_matched .)
    Continue        reduce using rule 13 (statement -> statement_matched .)
    Int             reduce using rule 13 (statement -> statement_matched .)
    Identifier      reduce using rule 13 (statement -> statement_matched .)
    Minus           reduce using rule 13 (statement -> statement_matched .)
    BitNot          reduce using rule 13 (statement -> statement_matched .)
    Not             reduce using rule 13 (statement -> statement_matched .)
    Integer         reduce using rule 13 (statement -> statement_matched .)
    LParen          reduce using rule 13 (statement -> statement_matched .)
    Semi            reduce using rule 13 (statement -> statement_matched .)


state 102

    (14) statement -> statement_unmatched .

    RBrace          reduce using rule 14 (statement -> statement_unmatched .)
    If              reduce using rule 14 (statement -> statement_unmatched .)
    While           reduce using rule 14 (statement -> statement_unmatched .)
    Return          reduce using rule 14 (statement -> statement_unmatched .)
    LBrace          reduce using rule 14 (statement -> statement_unmatched .)
    Break           reduce using rule 14 (statement -> statement_unmatched .)
    For             reduce using rule 14 (statement -> statement_unmatched .)
    Do              reduce using rule 14 (statement -> statement_unmatched .)
    Continue        reduce using rule 14 (statement -> statement_unmatched .)
    Int             reduce using rule 14 (statement -> statement_unmatched .)
    Identifier      reduce using rule 14 (statement -> statement_unmatched .)
    Minus           reduce using rule 14 (statement -> statement_unmatched .)
    BitNot          reduce using rule 14 (statement -> statement_unmatched .)
    Not             reduce using rule 14 (statement -> statement_unmatched .)
    Integer         reduce using rule 14 (statement -> statement_unmatched .)
    LParen          reduce using rule 14 (statement -> statement_unmatched .)
    Semi            reduce using rule 14 (statement -> statement_unmatched .)


state 103

    (24) opt_expression -> expression .

    Semi            reduce using rule 24 (opt_expression -> expression .)
    RParen          reduce using rule 24 (opt_expression -> expression .)


state 104

    (15) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (16) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 118


state 105

    (18) statement_matched -> While . LParen expression RParen statement_matched
    (19) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 119


state 106

    (20) statement_matched -> Return . expression Semi
    (28) expression -> . assignment
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 120
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 107

    (21) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 121


state 108

    (23) statement_matched -> Break . Semi

    Semi            shift and go to state 122


state 109

    (66) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (68) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (67) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (69) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched

    LParen          shift and go to state 123


state 110

    (70) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (71) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (15) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (18) statement_matched -> . While LParen expression RParen statement_matched
    (20) statement_matched -> . Return expression Semi
    (21) statement_matched -> . opt_expression Semi
    (22) statement_matched -> . LBrace block RBrace
    (23) statement_matched -> . Break Semi
    (66) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (68) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (70) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (72) statement_matched -> . Continue Semi
    (16) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> . If LParen expression RParen statement
    (19) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (67) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (69) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (71) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    If              shift and go to state 104
    While           shift and go to state 105
    Return          shift and go to state 106
    LBrace          shift and go to state 96
    Break           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 110
    Continue        shift and go to state 111
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    statement_matched              shift and go to state 124
    expression                     shift and go to state 103
    statement_unmatched            shift and go to state 125
    opt_expression                 shift and go to state 107
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 111

    (72) statement_matched -> Continue . Semi

    Semi            shift and go to state 126


state 112

    (25) opt_expression -> empty .

    Semi            reduce using rule 25 (opt_expression -> empty .)
    RParen          reduce using rule 25 (opt_expression -> empty .)


state 113

    (77) expression_list -> expression_list Comma expression .

    RParen          reduce using rule 77 (expression_list -> expression_list Comma expression .)
    Comma           reduce using rule 77 (expression_list -> expression_list Comma expression .)


state 114

    (62) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 62 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 62 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 62 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 62 (conditional -> logical_or Question expression Colon conditional .)


state 115

    (26) declaration -> type Identifier .
    (27) declaration -> type Identifier . Assign expression

    Semi            reduce using rule 26 (declaration -> type Identifier .)
    Assign          shift and go to state 12


state 116

    (22) statement_matched -> LBrace block . RBrace
    (9) block -> block . block_item
    (11) block_item -> . statement
    (12) block_item -> . declaration Semi
    (13) statement -> . statement_matched
    (14) statement -> . statement_unmatched
    (26) declaration -> . type Identifier
    (27) declaration -> . type Identifier Assign expression
    (15) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (18) statement_matched -> . While LParen expression RParen statement_matched
    (20) statement_matched -> . Return expression Semi
    (21) statement_matched -> . opt_expression Semi
    (22) statement_matched -> . LBrace block RBrace
    (23) statement_matched -> . Break Semi
    (66) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (68) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (70) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (72) statement_matched -> . Continue Semi
    (16) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> . If LParen expression RParen statement
    (19) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (67) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (69) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (71) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (6) type -> . Int
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    RBrace          shift and go to state 127
    If              shift and go to state 104
    While           shift and go to state 105
    Return          shift and go to state 106
    LBrace          shift and go to state 96
    Break           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 110
    Continue        shift and go to state 111
    Int             shift and go to state 5
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    block_item                     shift and go to state 98
    statement                      shift and go to state 99
    declaration                    shift and go to state 100
    statement_matched              shift and go to state 101
    statement_unmatched            shift and go to state 102
    type                           shift and go to state 95
    expression                     shift and go to state 103
    opt_expression                 shift and go to state 107
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 117

    (12) block_item -> declaration Semi .

    RBrace          reduce using rule 12 (block_item -> declaration Semi .)
    If              reduce using rule 12 (block_item -> declaration Semi .)
    While           reduce using rule 12 (block_item -> declaration Semi .)
    Return          reduce using rule 12 (block_item -> declaration Semi .)
    LBrace          reduce using rule 12 (block_item -> declaration Semi .)
    Break           reduce using rule 12 (block_item -> declaration Semi .)
    For             reduce using rule 12 (block_item -> declaration Semi .)
    Do              reduce using rule 12 (block_item -> declaration Semi .)
    Continue        reduce using rule 12 (block_item -> declaration Semi .)
    Int             reduce using rule 12 (block_item -> declaration Semi .)
    Identifier      reduce using rule 12 (block_item -> declaration Semi .)
    Minus           reduce using rule 12 (block_item -> declaration Semi .)
    BitNot          reduce using rule 12 (block_item -> declaration Semi .)
    Not             reduce using rule 12 (block_item -> declaration Semi .)
    Integer         reduce using rule 12 (block_item -> declaration Semi .)
    LParen          reduce using rule 12 (block_item -> declaration Semi .)
    Semi            reduce using rule 12 (block_item -> declaration Semi .)


state 118

    (15) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (16) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> If LParen . expression RParen statement
    (28) expression -> . assignment
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 128
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 119

    (18) statement_matched -> While LParen . expression RParen statement_matched
    (19) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (28) expression -> . assignment
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 129
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 120

    (20) statement_matched -> Return expression . Semi

    Semi            shift and go to state 130


state 121

    (21) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 21 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 21 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 21 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 21 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 21 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 21 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 21 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 21 (statement_matched -> opt_expression Semi .)


state 122

    (23) statement_matched -> Break Semi .

    RBrace          reduce using rule 23 (statement_matched -> Break Semi .)
    If              reduce using rule 23 (statement_matched -> Break Semi .)
    While           reduce using rule 23 (statement_matched -> Break Semi .)
    Return          reduce using rule 23 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 23 (statement_matched -> Break Semi .)
    Break           reduce using rule 23 (statement_matched -> Break Semi .)
    For             reduce using rule 23 (statement_matched -> Break Semi .)
    Do              reduce using rule 23 (statement_matched -> Break Semi .)
    Continue        reduce using rule 23 (statement_matched -> Break Semi .)
    Int             reduce using rule 23 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 23 (statement_matched -> Break Semi .)
    Minus           reduce using rule 23 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 23 (statement_matched -> Break Semi .)
    Not             reduce using rule 23 (statement_matched -> Break Semi .)
    Integer         reduce using rule 23 (statement_matched -> Break Semi .)
    LParen          reduce using rule 23 (statement_matched -> Break Semi .)
    Semi            reduce using rule 23 (statement_matched -> Break Semi .)
    Else            reduce using rule 23 (statement_matched -> Break Semi .)


state 123

    (66) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (68) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (67) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (69) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (26) declaration -> . type Identifier
    (27) declaration -> . type Identifier Assign expression
    (28) expression -> . assignment
    (1) empty -> .
    (6) type -> . Int
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 5
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    opt_expression                 shift and go to state 131
    declaration                    shift and go to state 132
    expression                     shift and go to state 103
    empty                          shift and go to state 112
    type                           shift and go to state 95
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 124

    (70) statement_matched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 133


state 125

    (71) statement_unmatched -> Do statement_unmatched . While LParen expression RParen Semi

    While           shift and go to state 134


state 126

    (72) statement_matched -> Continue Semi .

    RBrace          reduce using rule 72 (statement_matched -> Continue Semi .)
    If              reduce using rule 72 (statement_matched -> Continue Semi .)
    While           reduce using rule 72 (statement_matched -> Continue Semi .)
    Return          reduce using rule 72 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 72 (statement_matched -> Continue Semi .)
    Break           reduce using rule 72 (statement_matched -> Continue Semi .)
    For             reduce using rule 72 (statement_matched -> Continue Semi .)
    Do              reduce using rule 72 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 72 (statement_matched -> Continue Semi .)
    Int             reduce using rule 72 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 72 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 72 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 72 (statement_matched -> Continue Semi .)
    Not             reduce using rule 72 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 72 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 72 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 72 (statement_matched -> Continue Semi .)
    Else            reduce using rule 72 (statement_matched -> Continue Semi .)


state 127

    (22) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 22 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 22 (statement_matched -> LBrace block RBrace .)


state 128

    (15) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (16) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 135


state 129

    (18) statement_matched -> While LParen expression . RParen statement_matched
    (19) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 136


state 130

    (20) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 20 (statement_matched -> Return expression Semi .)
    If              reduce using rule 20 (statement_matched -> Return expression Semi .)
    While           reduce using rule 20 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 20 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 20 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 20 (statement_matched -> Return expression Semi .)
    For             reduce using rule 20 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 20 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 20 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 20 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 20 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 20 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 20 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 20 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 20 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 20 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 20 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 20 (statement_matched -> Return expression Semi .)


state 131

    (66) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched
    (67) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 137


state 132

    (68) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched
    (69) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 138


state 133

    (70) statement_matched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 139


state 134

    (71) statement_unmatched -> Do statement_unmatched While . LParen expression RParen Semi

    LParen          shift and go to state 140


state 135

    (15) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (16) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (17) statement_unmatched -> If LParen expression RParen . statement
    (15) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (18) statement_matched -> . While LParen expression RParen statement_matched
    (20) statement_matched -> . Return expression Semi
    (21) statement_matched -> . opt_expression Semi
    (22) statement_matched -> . LBrace block RBrace
    (23) statement_matched -> . Break Semi
    (66) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (68) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (70) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (72) statement_matched -> . Continue Semi
    (13) statement -> . statement_matched
    (14) statement -> . statement_unmatched
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (16) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> . If LParen expression RParen statement
    (19) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (67) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (69) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (71) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    If              shift and go to state 104
    While           shift and go to state 105
    Return          shift and go to state 106
    LBrace          shift and go to state 96
    Break           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 110
    Continue        shift and go to state 111
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 103
    statement_matched              shift and go to state 141
    statement_unmatched            shift and go to state 102
    statement                      shift and go to state 142
    opt_expression                 shift and go to state 107
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 136

    (18) statement_matched -> While LParen expression RParen . statement_matched
    (19) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (15) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (18) statement_matched -> . While LParen expression RParen statement_matched
    (20) statement_matched -> . Return expression Semi
    (21) statement_matched -> . opt_expression Semi
    (22) statement_matched -> . LBrace block RBrace
    (23) statement_matched -> . Break Semi
    (66) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (68) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (70) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (72) statement_matched -> . Continue Semi
    (16) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> . If LParen expression RParen statement
    (19) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (67) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (69) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (71) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    If              shift and go to state 104
    While           shift and go to state 105
    Return          shift and go to state 106
    LBrace          shift and go to state 96
    Break           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 110
    Continue        shift and go to state 111
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 103
    statement_matched              shift and go to state 143
    statement_unmatched            shift and go to state 144
    opt_expression                 shift and go to state 107
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 137

    (66) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (67) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    opt_expression                 shift and go to state 145
    expression                     shift and go to state 103
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 138

    (68) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (69) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    opt_expression                 shift and go to state 146
    expression                     shift and go to state 103
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 139

    (70) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (28) expression -> . assignment
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 147
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 140

    (71) statement_unmatched -> Do statement_unmatched While LParen . expression RParen Semi
    (28) expression -> . assignment
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 148
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 141

    (15) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (16) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (13) statement -> statement_matched .

    Else            shift and go to state 149
    RBrace          reduce using rule 13 (statement -> statement_matched .)
    If              reduce using rule 13 (statement -> statement_matched .)
    While           reduce using rule 13 (statement -> statement_matched .)
    Return          reduce using rule 13 (statement -> statement_matched .)
    LBrace          reduce using rule 13 (statement -> statement_matched .)
    Break           reduce using rule 13 (statement -> statement_matched .)
    For             reduce using rule 13 (statement -> statement_matched .)
    Do              reduce using rule 13 (statement -> statement_matched .)
    Continue        reduce using rule 13 (statement -> statement_matched .)
    Int             reduce using rule 13 (statement -> statement_matched .)
    Identifier      reduce using rule 13 (statement -> statement_matched .)
    Minus           reduce using rule 13 (statement -> statement_matched .)
    BitNot          reduce using rule 13 (statement -> statement_matched .)
    Not             reduce using rule 13 (statement -> statement_matched .)
    Integer         reduce using rule 13 (statement -> statement_matched .)
    LParen          reduce using rule 13 (statement -> statement_matched .)
    Semi            reduce using rule 13 (statement -> statement_matched .)


state 142

    (17) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 17 (statement_unmatched -> If LParen expression RParen statement .)


state 143

    (18) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 18 (statement_matched -> While LParen expression RParen statement_matched .)


state 144

    (19) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 19 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 145

    (66) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched
    (67) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 150


state 146

    (68) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched
    (69) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 151


state 147

    (70) statement_matched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 152


state 148

    (71) statement_unmatched -> Do statement_unmatched While LParen expression . RParen Semi

    RParen          shift and go to state 153


state 149

    (15) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (16) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (15) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (18) statement_matched -> . While LParen expression RParen statement_matched
    (20) statement_matched -> . Return expression Semi
    (21) statement_matched -> . opt_expression Semi
    (22) statement_matched -> . LBrace block RBrace
    (23) statement_matched -> . Break Semi
    (66) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (68) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (70) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (72) statement_matched -> . Continue Semi
    (16) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> . If LParen expression RParen statement
    (19) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (67) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (69) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (71) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    If              shift and go to state 104
    While           shift and go to state 105
    Return          shift and go to state 106
    LBrace          shift and go to state 96
    Break           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 110
    Continue        shift and go to state 111
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    expression                     shift and go to state 103
    statement_matched              shift and go to state 154
    statement_unmatched            shift and go to state 155
    opt_expression                 shift and go to state 107
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 150

    (66) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (67) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    opt_expression                 shift and go to state 156
    expression                     shift and go to state 103
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 151

    (68) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (69) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    opt_expression                 shift and go to state 157
    expression                     shift and go to state 103
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 152

    (70) statement_matched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 158


state 153

    (71) statement_unmatched -> Do statement_unmatched While LParen expression RParen . Semi

    Semi            shift and go to state 159


state 154

    (15) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 15 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 155

    (16) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 16 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 156

    (66) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched
    (67) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 160


state 157

    (68) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched
    (69) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 161


state 158

    (70) statement_matched -> Do statement_matched While LParen expression RParen Semi .

    RBrace          reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 70 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)


state 159

    (71) statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .

    RBrace          reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    If              reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    While           reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Return          reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LBrace          reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Break           reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    For             reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Do              reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Continue        reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Int             reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Identifier      reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Minus           reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    BitNot          reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Not             reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Integer         reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LParen          reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Semi            reduce using rule 71 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)


state 160

    (66) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (67) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (15) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (18) statement_matched -> . While LParen expression RParen statement_matched
    (20) statement_matched -> . Return expression Semi
    (21) statement_matched -> . opt_expression Semi
    (22) statement_matched -> . LBrace block RBrace
    (23) statement_matched -> . Break Semi
    (66) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (68) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (70) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (72) statement_matched -> . Continue Semi
    (16) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> . If LParen expression RParen statement
    (19) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (67) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (69) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (71) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    If              shift and go to state 104
    While           shift and go to state 105
    Return          shift and go to state 106
    LBrace          shift and go to state 96
    Break           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 110
    Continue        shift and go to state 111
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    opt_expression                 shift and go to state 107
    statement_matched              shift and go to state 162
    statement_unmatched            shift and go to state 163
    expression                     shift and go to state 103
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 161

    (68) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (69) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (15) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (18) statement_matched -> . While LParen expression RParen statement_matched
    (20) statement_matched -> . Return expression Semi
    (21) statement_matched -> . opt_expression Semi
    (22) statement_matched -> . LBrace block RBrace
    (23) statement_matched -> . Break Semi
    (66) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (68) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (70) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (72) statement_matched -> . Continue Semi
    (16) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (17) statement_unmatched -> . If LParen expression RParen statement
    (19) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (67) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (69) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched
    (71) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (24) opt_expression -> . expression
    (25) opt_expression -> . empty
    (28) expression -> . assignment
    (1) empty -> .
    (29) assignment -> . conditional
    (45) assignment -> . Identifier Assign expression
    (30) conditional -> . logical_or
    (62) conditional -> . logical_or Question expression Colon conditional
    (31) logical_or -> . logical_and
    (46) logical_or -> . logical_or Or logical_and
    (32) logical_and -> . bit_or
    (47) logical_and -> . logical_and And bit_or
    (33) bit_or -> . xor
    (48) bit_or -> . bit_or BitOr xor
    (34) xor -> . bit_and
    (49) xor -> . xor Xor bit_and
    (35) bit_and -> . equality
    (50) bit_and -> . bit_and BitAnd equality
    (36) equality -> . relational
    (51) equality -> . equality NotEqual relational
    (52) equality -> . equality Equal relational
    (37) relational -> . additive
    (53) relational -> . relational Less additive
    (54) relational -> . relational Greater additive
    (55) relational -> . relational LessEqual additive
    (56) relational -> . relational GreaterEqual additive
    (38) additive -> . multiplicative
    (57) additive -> . additive Plus multiplicative
    (58) additive -> . additive Minus multiplicative
    (39) multiplicative -> . unary
    (59) multiplicative -> . multiplicative Mul unary
    (60) multiplicative -> . multiplicative Div unary
    (61) multiplicative -> . multiplicative Mod unary
    (40) unary -> . postfix
    (42) unary -> . Minus unary
    (43) unary -> . BitNot unary
    (44) unary -> . Not unary
    (41) postfix -> . primary
    (80) postfix -> . Identifier LParen expression_list RParen
    (63) primary -> . Integer
    (64) primary -> . Identifier
    (65) primary -> . LParen expression RParen

    If              shift and go to state 104
    While           shift and go to state 105
    Return          shift and go to state 106
    LBrace          shift and go to state 96
    Break           shift and go to state 108
    For             shift and go to state 109
    Do              shift and go to state 110
    Continue        shift and go to state 111
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 17
    Minus           shift and go to state 30
    BitNot          shift and go to state 33
    Not             shift and go to state 34
    Integer         shift and go to state 37
    LParen          shift and go to state 36

    opt_expression                 shift and go to state 107
    statement_matched              shift and go to state 164
    statement_unmatched            shift and go to state 165
    expression                     shift and go to state 103
    empty                          shift and go to state 112
    assignment                     shift and go to state 19
    conditional                    shift and go to state 20
    logical_or                     shift and go to state 21
    logical_and                    shift and go to state 22
    bit_or                         shift and go to state 23
    xor                            shift and go to state 24
    bit_and                        shift and go to state 25
    equality                       shift and go to state 26
    relational                     shift and go to state 27
    additive                       shift and go to state 28
    multiplicative                 shift and go to state 29
    unary                          shift and go to state 31
    postfix                        shift and go to state 32
    primary                        shift and go to state 35

state 162

    (66) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 66 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)


state 163

    (67) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 67 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 164

    (68) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 68 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)


state 165

    (69) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 69 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_unmatched .)

